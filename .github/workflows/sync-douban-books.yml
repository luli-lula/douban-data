name: Sync Douban Books Data

on:
  schedule:
    # 每周日UTC 17点 (北京时间周一1点) 同步书籍数据
    - cron: '0 17 * * 0'
  workflow_dispatch: # 手动触发

jobs:
  sync-and-process:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Create raw data directory
        run: mkdir -p ./data/raw
        
      - name: Sync Douban Books Data
        uses: lizheming/doumark-action@master
        with:
          id: 59715677  # 你的豆瓣用户ID
          type: book
          format: csv
          # status: done  # 已读完的书籍 - 不指定status参数，获取所有状态
          dir: ./data/raw
          
      - name: Debug - Check generated files
        run: |
          echo "Contents of data/raw directory:"
          ls -la ./data/raw/ || echo "Directory not found"
          echo "Book CSV file info:"
          ls -la ./data/raw/book.csv || echo "book.csv not found"
          if [ -f "./data/raw/book.csv" ]; then
            echo "First few lines of book.csv:"
            head -5 ./data/raw/book.csv
          fi
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install
          
      - name: Fix file permissions
        run: |
          sudo chown -R runner:docker ./data/raw/ || true
          
      - name: Clean CSV file (fix encoding and quote issues)
        run: |
          if [ -f "./data/raw/book.csv" ]; then
            echo "清理book.csv，修复编码和引号问题..."
            # 备份原文件
            cp ./data/raw/book.csv ./data/raw/book.csv.backup
            
            # 使用Node.js脚本清理CSV，修复编码和引号问题
            node -e "
              const fs = require('fs');
              try {
                const csvContent = fs.readFileSync('./data/raw/book.csv', 'utf8');
                const lines = csvContent.split('\n');
                
                console.log('原始CSV行数:', lines.length);
                
                const cleanLines = [];
                const header = 'id,title,poster,pubdate,url,rating,genres,star,comment,tags,star_time,card';
                cleanLines.push(header);
                
                let processedBooks = 0;
                
                // 修复CSV引号和编码问题
                for (let i = 0; i < lines.length; i++) {
                  const line = lines[i].trim();
                  if (!line || !line.includes('book.douban.com/subject/') || !line.match(/^\d+/)) {
                    continue;
                  }
                  
                  try {
                    // 先修复常见的引号问题
                    let cleanedLine = line
                      .replace(/\"/g, '\"\"')  // 转义内部引号
                      .replace(/([^,])\"([^,])/g, '\$1\"\"\$2')  // 修复中间的引号
                      .replace(/\"([^\"]*?)([,\n])/g, '\"\$1\"\$2');  // 确保字段被正确引用
                    
                    // 使用更robust的方式解析CSV行
                    const csvRegex = /(?:^|,)(\"(?:[^\"]|\"\")*\"|[^,]*)/g;
                    const fields = [];
                    let match;
                    
                    while ((match = csvRegex.exec(cleanedLine)) !== null) {
                      let field = match[1];
                      if (field.startsWith('\"') && field.endsWith('\"')) {
                        field = field.slice(1, -1).replace(/\"\"/g, '\"');
                      }
                      fields.push(field);
                    }
                    
                    if (fields.length >= 10) {
                      // 提取关键字段
                      const bookId = fields[0];
                      const title = fields[1] || '';
                      let posterUrl = '';
                      let doubanUrl = '';
                      let rating = '';
                      let genres = '';
                      
                      // 找到豆瓣URL和相关字段
                      for (let j = 0; j < fields.length; j++) {
                        if (fields[j] && fields[j].includes('dou.img.lithub.cc')) {
                          posterUrl = fields[j];
                        } else if (fields[j] && fields[j].includes('book.douban.com/subject/')) {
                          doubanUrl = fields[j];
                          if (j + 1 < fields.length) rating = fields[j + 1] || '';
                          if (j + 2 < fields.length) genres = fields[j + 2] || '';
                        }
                      }
                      
                      // 从末尾提取固定字段
                      const card = fields[fields.length - 1] || '';
                      const star_time = fields[fields.length - 2] || '';
                      const tags = fields[fields.length - 3] || '';
                      const comment = fields[fields.length - 4] || '';
                      const star = fields[fields.length - 5] || '';
                      
                      // 清理genres字段，移除可能导致解析问题的字符
                      const cleanGenres = genres.replace(/[\"\n\r]/g, '').replace(/,/g, '，');
                      
                      const cleanedParts = [
                        bookId,
                        title.replace(/[\"\n\r]/g, ''),
                        posterUrl,
                        '',  // pubdate
                        doubanUrl,
                        rating,
                        cleanGenres,
                        star,
                        comment.replace(/[\"\n\r]/g, ''),
                        tags.replace(/[\"\n\r]/g, ''),
                        star_time,
                        card.replace(/[\"\n\r]/g, '')
                      ];
                      
                      cleanLines.push(cleanedParts.join(','));
                      processedBooks++;
                    }
                  } catch (e) {
                    console.log('处理书籍行失败 (行 ' + (i+1) + '):', e.message);
                    console.log('问题行内容:', line.substring(0, 200) + '...');
                  }
                }
                
                fs.writeFileSync('./data/raw/book.csv', cleanLines.join('\n'));
                console.log('清理后CSV行数:', cleanLines.length);
                console.log('成功处理书籍数:', processedBooks);
                console.log('CSV清理完成！');
              } catch (error) {
                console.error('清理CSV失败:', error.message);
                process.exit(1);
              }
            "
          else
            echo "book.csv not found, skipping cleanup"
          fi
          
      - name: Process CSV data and filter 5-star books
        run: |
          if [ -f "./data/raw/book.csv" ]; then
            echo "Processing book.csv..."
            node scripts/process-csv-books.js
          else
            echo "⚠️  book.csv not found, skipping processing"
          fi
          
      - name: Commit and push changes
        uses: EndBug/add-and-commit@v9
        with:
          message: '📚 更新豆瓣书籍数据'
          add: 'data/raw/book.csv data/books.json data/book-stats.json data/backup/books-backup.json images/books/*'